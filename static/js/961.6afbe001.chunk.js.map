{"version":3,"file":"static/js/961.6afbe001.chunk.js","mappings":"wNAsDA,UA/CqB,WAAO,IAAD,IACxB,GAAwCA,EAAAA,EAAAA,UAAS,CAAC,GAAlD,eAAOC,EAAP,KAAqBC,EAArB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACAE,EAAuDJ,EAAvDI,MAAOC,EAAgDL,EAAhDK,YAAaC,EAAmCN,EAAnCM,aAAcC,EAAqBP,EAArBO,SAAUC,EAAWR,EAAXQ,OAE9CC,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2BC,EAAAA,EAAAA,SAQ9C,OANAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAab,GACVc,MAAK,SAAAC,GAAI,OAAIhB,EAAgBgB,EAApB,IACTC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,iBAAkBF,EAAMG,QAAxC,GACf,GAAE,CAACpB,KAGF,iCACE,SAAC,KAAD,CAAMqB,GAAId,EAAV,sBACA,mBACA,gBAAKe,IAAKnB,EAAW,UAAMoB,EAAAA,IAAN,OAAqBpB,GAAgBqB,EAAgBC,IAAMvB,EAAQwB,MAAM,WAC9F,6BAAMxB,EAAN,QACA,0CAAkBE,EAAY,UAAMuB,KAAKC,MAAqB,GAAfxB,GAAjB,KAAyC,MACvE,sCACA,6BAAKC,EAAL,OACCC,IACC,iCACE,oCACA,uBAAIA,EAAOuB,KAAI,SAAAC,GAAK,gBAAOA,EAAMC,KAAb,cAIxB,oDACA,2BACE,yBACE,SAAC,KAAD,CAAMV,GAAIV,EAAAA,EAAAA,KAAV,qBAGF,yBACE,SAAC,KAAD,CAAMU,GAAIV,EAAAA,EAAAA,QAAV,2BAIJ,SAAC,EAAAqB,SAAD,CAAUC,UAAU,+CAApB,UACE,SAAC,KAAD,QAIP,C,uNClDYV,EAAe,kCACtBW,EAAW,+BACXC,EAAU,mCAEVC,EAAQ,SAKVC,EAAU,CACVC,OAAQ,CACJC,QAASJ,IAIJK,EAAiB,mCAAG,6GAEFC,EAAAA,EAAAA,IAAUP,EAdxB,sBAc6CG,GAF7B,cAEnBK,EAFmB,yBAIlBA,EAAS3B,MAJS,gCAMzBG,QAAQC,IAAI,iBAAkB,KAAMC,SANX,yDAAH,qDAUjBP,EAAY,mCAAG,WAAM8B,GAAN,iGAEGF,EAAAA,EAAAA,GAAM,GAAD,OAAIP,GAAJ,OAAeE,EAAf,YAAwBO,GAAMN,GAFtC,cAEdK,EAFc,yBAIbA,EAAS3B,MAJI,gCAMpBG,QAAQC,IAAI,iBAAkB,KAAMC,SANhB,yDAAH,sDAUZwB,EAAe,mCAAG,WAAMD,GAAN,iGAEFF,EAAAA,EAAAA,GAAM,GAAD,OACvBP,GADuB,OACZE,EADY,YACHO,GADG,OAhClB,YAkCRN,GAJuB,cAEnBK,EAFmB,yBAOlBA,EAAS3B,MAPS,gCASzBG,QAAQC,IAAI,iBAAkB,KAAMC,SATX,yDAAH,sDAafyB,EAAe,mCAAG,WAAMF,GAAN,iGAEAF,EAAAA,EAAAA,GAAM,GAAD,OAAIP,GAAJ,OAAeE,EAAf,YAAwBO,GAAxB,OA5CpB,YA4C4DN,GAF7C,cAEjBK,EAFiB,yBAIhBA,EAAS3B,MAJO,gCAMvBG,QAAQC,IAAI,iBAAkB,KAAMC,SANb,yDAAH,sDAUf0B,EAAe,mCAAG,WAAMC,GAAN,gFACvBV,EAAS,CACTC,OAAQ,CACJC,QAASJ,EACTY,MAAOA,IAJY,mBASAN,EAAAA,EAAAA,GAAM,GAAD,OAAIP,GAAJ,OA5DrB,iBA4D8CG,GAT9B,cASjBK,EATiB,yBAWhBA,EAAS3B,MAXO,gCAavBG,QAAQC,IAAI,iBAAkB,KAAMC,SAbb,yDAAH,qD","sources":["pages/MovieDetails/MovieDetails.jsx","services/api.js"],"sourcesContent":["import { Suspense, useEffect, useState} from \"react\";\nimport { useParams, Link, Outlet, useLocation } from \"react-router-dom\";\nimport { PAGE_NAMES } from \"router/paths\";\nimport { getMovieById } from \"services/api\";\nimport { BASE_IMG_URL } from \"services/api\";\nimport deafult_poster from \"../../components/image/deafult_poster.png\"\n\nconst MovieDetails = () => {\n   const [movieDetails, setMovieDetails] = useState({});\n   const { movieId } = useParams();\n   const { title, poster_path, vote_average, overview, genres } = movieDetails;\n   const location = useLocation();\n   const backlinkHref = location.state?.from ?? PAGE_NAMES.homepage;\n   \n  useEffect(() => {\n    getMovieById(movieId)\n      .then(data => setMovieDetails(data))\n      .catch(error => console.log('Error message:', error.message));\n  }, [movieId])\n\n  return (\n    <>\n      <Link to={backlinkHref}>Go back</Link>\n      <br/>\n      <img src={poster_path ? `${BASE_IMG_URL}${poster_path}` : deafult_poster} alt={ title } width='300px'/>\n      <p> { title } </p>\n      <p>  User Score: {vote_average ? `${Math.round(vote_average * 10)}%` : 0}</p>\n      <h3>Overview</h3>\n      <p> {overview} </p>\n      {genres && (\n        <>\n          <h3>Genres</h3>\n          <p>{genres.map(genre => `${genre.name} `)}</p>\n        </>\n      )}\n\n      <h4>Additional information</h4>\n      <ul>\n        <li>\n          <Link to={PAGE_NAMES.cast}>Cast</Link>\n        </li>\n\n        <li>\n          <Link to={PAGE_NAMES.reviews}>Reviews</Link>\n        </li>\n      </ul>\n\n      <Suspense fallback={<> loading... </>}> \n        <Outlet></Outlet>\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n\n","import axios from \"axios\";\n\nexport const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'e90e5cc72f12501ca886fe4fb737b4cc';\nconst TRENDING = '/trending/movie/day';\nconst MOVIE = '/movie';\nconst CREDITS = '/credits';\nconst REVIEWS = '/reviews';\nconst SEARCH = '/search/movie';\n\nlet options = {\n    params: {\n        api_key: API_KEY,\n    }\n};\n\nexport const getTrendingMovies = async () => {\n    try {\n        const response = await axios.get(BASE_URL + TRENDING, options);\n\n        return response.data;\n    } catch (error) {\n        console.log('Error message:', error.message);\n    }\n};\n\nexport const getMovieById = async id => {\n    try {\n        const response = await axios(`${BASE_URL}${MOVIE}/${id}`, options)\n\n        return response.data\n    } catch (error) {\n        console.log('Error message:', error.message);\n    }\n};\n\nexport const getMovieCredits = async id => {\n    try {\n      const response = await axios(\n        `${BASE_URL}${MOVIE}/${id}${CREDITS}`,\n        options\n      );\n  \n      return response.data;\n    } catch (error) {\n      console.log('error.message:', error.message);\n    }\n};\n\nexport const getMovieReviews = async id => {\n    try {\n        const response = await axios(`${BASE_URL}${MOVIE}/${id}${REVIEWS}`, options)\n\n        return response.data\n    } catch (error) {\n        console.log('Error message:', error.message);\n    }\n};\n\nexport const getMovieByQuery = async query => {\n    let options ={\n        params: {\n            api_key: API_KEY,\n            query: query,\n        }\n    };\n\n    try {\n        const response = await axios(`${BASE_URL}${SEARCH}`, options)\n\n        return response.data\n    } catch (error) {\n        console.log('Error message:', error.message);\n    }\n};\n"],"names":["useState","movieDetails","setMovieDetails","movieId","useParams","title","poster_path","vote_average","overview","genres","backlinkHref","useLocation","state","from","PAGE_NAMES","useEffect","getMovieById","then","data","catch","error","console","log","message","to","src","BASE_IMG_URL","deafult_poster","alt","width","Math","round","map","genre","name","Suspense","fallback","BASE_URL","API_KEY","MOVIE","options","params","api_key","getTrendingMovies","axios","response","id","getMovieCredits","getMovieReviews","getMovieByQuery","query"],"sourceRoot":""}